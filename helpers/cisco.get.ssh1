# Archivist internal expect script
#
# cisco.get.ssh - method for getting configuration from a Cisco IOS device
#

set timeout 15

log_user 0
spawn ssh -1 -l [lindex $argv 1] [lindex $argv 0]

expect {
 eof {exit}
 timeout {exit 1}
 "ssword:" {send "[lindex $argv 2]\r"}
 "yes/no" 
   {
    send "yes\r"
    expect "ssword:"
    send "[lindex $argv 2]\r"
   }
}

expect {
  eof {exit}
  timeout {exit}
  ">"
  {
   send "enable\r"
   expect {
     "ssword:" {send "[lindex $argv 3]\r"}
     "ame:" {send "[lindex $argv 1]\r"}
       expect {
         "ssword:" {send "[lindex $argv 3]\r"}
         "ame:" {exit}
        }
       }
     }
  "failed" {exit}
  "ssword:" {exit}
  "ame:" {exit}
 }

send "\r"

expect { 
  eof {exit}
  timeout {exit}
  "failed" {exit}
  "ame:" {exit}
  "ssword:" {exit}
  "#" {send "\r"}
 }

#if we are logged in now, we should be able to catch prompt:
set prompt "$expect_out(buffer)"
set prompt [string trim $prompt "\r"]
set prompt [string trim $prompt "\n"]
set prompt [string trim $prompt]

expect $prompt

send "term length 0\r"
send "terminal pager 0\r"

expect {
  eof {exit}
  timeout {exit}
  "ame:" {exit}
  "ssword:" {exit}
  "failed" {exit}
  $prompt {send "show version\r"}
 }

#now check if we are _really_ logged in, and can execute commands:
expect {
  eof {exit}
  timeout {exit}
  "IOS" {send "\r"}
  "Cisco" {send "\r"}
  "FWSM" {send "\r"}
 }

expect $prompt

send "\r"
expect $prompt

log_file -a -noappend [lindex $argv 0].new
set timeout 30
send "write term\r"

expect {
  eof {exit}
  timeout {exit}
  "ssword:" {exit}
  "failed" {exit}
  $prompt {send "\r"}
}

expect $prompt
log_file
send "exit\r"
expect "host."

